import { ILLM, CompletionCallback, LLMResult } from './llm/type.js';
export { LLMError, LLMErrorType } from './llm/type.js';

declare class LLM<Instance = any, LoadConfig = any, LLMInferenceArguments = any, LLMEmbeddingArguments = any, TokenizeArguments = any> {
    llm: ILLM<Instance, LoadConfig, LLMInferenceArguments, LLMEmbeddingArguments, TokenizeArguments>;
    constructor(llm: new () => ILLM<Instance, LoadConfig, LLMInferenceArguments, LLMEmbeddingArguments, TokenizeArguments>);
    load(config: LoadConfig): Promise<void>;
    createCompletion(params: LLMInferenceArguments, callback: CompletionCallback, abortSignal?: AbortSignal): Promise<LLMResult>;
    getEmbedding(params: LLMEmbeddingArguments): Promise<number[]>;
    getDefaultEmbeddings(text: string): Promise<number[]>;
    tokenize(content: TokenizeArguments): Promise<number[]>;
}

export { CompletionCallback, ILLM, LLM, LLMResult, LLM as LLama };
