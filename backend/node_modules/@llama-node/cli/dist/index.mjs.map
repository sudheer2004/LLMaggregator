{"version":3,"sources":["../../../node_modules/.pnpm/tsup@6.7.0_typescript@5.0.4/node_modules/tsup/assets/esm_shims.js","../src/index.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","#!/usr/bin/env node\nimport {\n    convert,\n    Generate,\n    Llm,\n    ModelLoad,\n    InferenceResultType,\n} from \"@llama-node/core\";\nimport yargs from \"yargs\";\nimport path from \"path\";\nimport { existsSync } from \"fs\";\n\nconst convertType = [\"q4_0\", \"q4_1\", \"f16\", \"f32\"] as const;\n\ntype ConvertType = (typeof convertType)[number];\n\ninterface CLIInferenceArguments extends Partial<Generate>, ModelLoad {\n    logger?: boolean;\n}\n\nclass InferenceCommand implements yargs.CommandModule {\n    command = \"inference\";\n    describe = \"Inference LLaMA\";\n    builder(args: yargs.Argv) {\n        return (args as yargs.Argv<CLIInferenceArguments>)\n            .help(\"help\")\n            .example('llama inference -p \"How are you?\"', \"Inference LLaMA\")\n            .options(\"modelType\", {\n                type: \"string\",\n                demandOption: true,\n            })\n            .options(\"feedPrompt\", {\n                type: \"boolean\",\n                demandOption: false,\n                description: \"Set it to true to hide promt feeding progress\",\n            })\n            .options(\"float16\", { type: \"boolean\", demandOption: false })\n            .options(\"ignoreEos\", { type: \"boolean\", demandOption: false })\n            .options(\"batchSize\", { type: \"number\", demandOption: false })\n            .options(\"numThreads\", { type: \"number\", demandOption: false })\n            .options(\"numPredict\", { type: \"number\", demandOption: false })\n            .options(\"prompt\", {\n                type: \"string\",\n                demandOption: true,\n                alias: \"p\",\n            })\n            .options(\"repeatLastN\", { type: \"number\", demandOption: false })\n            .options(\"repeatPenalty\", { type: \"number\", demandOption: false })\n            .options(\"seed\", { type: \"number\", demandOption: false })\n            .options(\"temperature\", { type: \"number\", demandOption: false })\n            .options(\"tokenBias\", { type: \"string\", demandOption: false })\n            .options(\"topK\", { type: \"number\", demandOption: false })\n            .options(\"topP\", { type: \"number\", demandOption: false })\n            .options(\"modelPath\", {\n                type: \"string\",\n                demandOption: true,\n                alias: [\"m\", \"model\"],\n            })\n            .options(\"numCtxTokens\", { type: \"number\", demandOption: false })\n            .options(\"logger\", {\n                type: \"boolean\",\n                demandOption: false,\n                default: true,\n                alias: \"verbose\",\n            });\n    }\n    async handler(args: yargs.ArgumentsCamelCase) {\n        const { $0, _, modelPath, modelType, numCtxTokens, logger, ...rest } =\n            args as yargs.ArgumentsCamelCase<CLIInferenceArguments>;\n        const absolutePath = path.isAbsolute(modelPath)\n            ? modelPath\n            : path.join(process.cwd(), modelPath);\n        const llm = await Llm.load(\n            {\n                modelPath: absolutePath,\n                modelType,\n                numCtxTokens,\n            },\n            logger ?? true\n        );\n        llm.inference(rest, (result) => {\n            switch (result.type) {\n                case InferenceResultType.Data:\n                    process.stdout.write(result.data?.token ?? \"\");\n                    break;\n                case InferenceResultType.Error:\n                    console.error(result.message);\n                    break;\n                case InferenceResultType.End:\n                    break;\n            }\n        });\n    }\n}\n\n(yargs as yargs.Argv<any | CLIInferenceArguments>)\n    .scriptName(\"llama\")\n    .usage(\"$0 <cmd> [args]\")\n    .command(new InferenceCommand())\n    .demandCommand(1, \"You need at least one command before moving on\")\n    .strict()\n    .parse();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACCA;AAAA,EAGI;AAAA,EAEA;AAAA,OACG;AACP,OAAO,WAAW;AAClB,OAAO,UAAU;AATjB;AAAA;AAAA;AAoBA,QAAM,mBAAN,MAAsD;AAAA,MAAtD;AACI,uBAAU;AACV,wBAAW;AAAA;AAAA,MACX,QAAQ,MAAkB;AACtB,eAAQ,KACH,KAAK,MAAM,EACX,QAAQ,qCAAqC,iBAAiB,EAC9D,QAAQ,aAAa;AAAA,UAClB,MAAM;AAAA,UACN,cAAc;AAAA,QAClB,CAAC,EACA,QAAQ,cAAc;AAAA,UACnB,MAAM;AAAA,UACN,cAAc;AAAA,UACd,aAAa;AAAA,QACjB,CAAC,EACA,QAAQ,WAAW,EAAE,MAAM,WAAW,cAAc,MAAM,CAAC,EAC3D,QAAQ,aAAa,EAAE,MAAM,WAAW,cAAc,MAAM,CAAC,EAC7D,QAAQ,aAAa,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EAC5D,QAAQ,cAAc,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EAC7D,QAAQ,cAAc,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EAC7D,QAAQ,UAAU;AAAA,UACf,MAAM;AAAA,UACN,cAAc;AAAA,UACd,OAAO;AAAA,QACX,CAAC,EACA,QAAQ,eAAe,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EAC9D,QAAQ,iBAAiB,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EAChE,QAAQ,QAAQ,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EACvD,QAAQ,eAAe,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EAC9D,QAAQ,aAAa,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EAC5D,QAAQ,QAAQ,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EACvD,QAAQ,QAAQ,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EACvD,QAAQ,aAAa;AAAA,UAClB,MAAM;AAAA,UACN,cAAc;AAAA,UACd,OAAO,CAAC,KAAK,OAAO;AAAA,QACxB,CAAC,EACA,QAAQ,gBAAgB,EAAE,MAAM,UAAU,cAAc,MAAM,CAAC,EAC/D,QAAQ,UAAU;AAAA,UACf,MAAM;AAAA,UACN,cAAc;AAAA,UACd,SAAS;AAAA,UACT,OAAO;AAAA,QACX,CAAC;AAAA,MACT;AAAA,MACM,QAAQ,MAAgC;AAAA;AAC1C,gBACI,WADI,MAAI,GAAG,WAAW,WAAW,cAAc,OAnE3D,IAoEY,IAD0D,iBAC1D,IAD0D,CAAtD,MAAI,KAAG,aAAW,aAAW,gBAAc;AAEnD,gBAAM,eAAe,KAAK,WAAW,SAAS,IACxC,YACA,KAAK,KAAK,QAAQ,IAAI,GAAG,SAAS;AACxC,gBAAM,MAAM,MAAM,IAAI;AAAA,YAClB;AAAA,cACI,WAAW;AAAA,cACX;AAAA,cACA;AAAA,YACJ;AAAA,YACA,0BAAU;AAAA,UACd;AACA,cAAI,UAAU,MAAM,CAAC,WAAW;AAhFxC,gBAAAA,KAAA;AAiFY,oBAAQ,OAAO,MAAM;AAAA,cACjB,KAAK,oBAAoB;AACrB,wBAAQ,OAAO,OAAM,MAAAA,MAAA,OAAO,SAAP,gBAAAA,IAAa,UAAb,YAAsB,EAAE;AAC7C;AAAA,cACJ,KAAK,oBAAoB;AACrB,wBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,cACJ,KAAK,oBAAoB;AACrB;AAAA,YACR;AAAA,UACJ,CAAC;AAAA,QACL;AAAA;AAAA,IACJ;AAEA,IAAC,MACI,WAAW,OAAO,EAClB,MAAM,iBAAiB,EACvB,QAAQ,IAAI,iBAAiB,CAAC,EAC9B,cAAc,GAAG,gDAAgD,EACjE,OAAO,EACP,MAAM;AAAA;AAAA;","names":["_a"]}